/* 1. Servlet 기본 개념 관련 */

/* Servlet이란 무엇인가요? */
// Servlet이란, 자바를 기반으로 한 서버 측 프로그램으로. 클라이언트(주로 웹 브라우저)의 HTTP 요청을 받아 처리하고,
// 그에 대한 응답을 생성하는 웹 어플리케이션 컴포넌트이다.
// 일반적으로 HTML만으로는 동적인 웹 페이지 구성이 어렵기 때문에.
// Servlet을 이용해 로그인 처리, DB 조회 결과 출력. 폼 데이터 처리 등과 같은 동적인 로직 서버에서 수행할 수 있다.
// Servlet은 JavaEE의 일부이며, 톰캣(Tomcat) 같은 서블릿 컨테이너 위에서 실행되며 HttpServlet 클래스를 상속하여 주로 구현한다.

/* Servlet의 역할 */
// Java Web Application 개발 환경에서 클라이언트의 요청을 받아 처리하고 동적 웹페이지를 응답해주는 역할을 한다.

/* Servlet과 JSP의 차이는 무엇인가요? */

/* Servlet의 생명주기(Lifecycle)를 설명해보세요. */
// Servlet 생명주기느 크게 세 단계인 init(), service(), destroy() 로 구성되며,
// 이 생명주기는 Tomcat과 같은 서블릿 컨테이너에 의헤 자동으로 관리된다.
// init()은 
// 서블릿이 최초 요청될 때 서블릿 컨테이너는 해당 클래스의 인스턴스를 생성하고
// init() 메소드를 한 번 호출하여 초기화를 수행한다. 이 메소드는 서블릿이 시작될 때 한 번만 실행된다.
// service()는
// 클라이언트로부터 요청이 들어오면 service() 메소드가 호출되어 요청을 처리한다.
// service() 메소드는 요청의 HTTP 메소드 타입(GET, POST 등)에 따라 doGet(), doPost() 등으로 분기하여 요청을 처리한다.
// destroy()는 
// 서버가 종료되거나 서블릿이 언로드 될 때 호출되며, 자원을 해제하거나 정리 작업을 수행하는 데 사용된다.
// 이 생명주기는 서블릿 컨테이너에(Tomcat 등)에 의해 자동으로 관리된다.
// 서블릿 객체는 일반적으로 싱글톤으로 관리되어, 한 번 생성된 객체가 여러 요청을 처리하는 데 재사용된다.

// Servlet의 생명주기는 3단계 init(), service(), destroy()로 나뉘어진다.
// 우선 클라이언트로부터 요청이 들어오면 Servlet 클래스가 로딩되어 요청에 대한 Servlet 객체가 생성된다.
// 서버는 Servlet 객체가 처음 호출 될 때 init() 메소드를 호출하여 Servlet을 초기화한다.
// 그 후의 요청이 들어올 경우에는 service() 메소드를 호출하여 브라우저의 요청을 처리하도록 한다.
// service() 메소드는 특정 HTTP요청(GET, POST 등)을 처리하는 메소드인 doGet(), doPost()를 호출한다.
// 마지막으로 서버는 응답이 끝나면 destroy() 메소드를 호출하여 Servlet을 제거한다.

/* Servlet 클래스에서 반드시 구현해야 하는 메서드는 어떤 게 있나요? */
// Servlet 클래스는 반드시 javax.servlet.Servlet 인터페이스를 구현해야 한다.
// Servlet 컨테이너가 Servlet에 대해 호출할 메소드를 정의한 것이 바로 Servlet 인터페이스이다.
// Servlet 인터페이스는 init(), service(), destroy(), getServletInfo(), getServletConfig() 5개의 메소드가 정의되어 있다.
// 각각에 대해 설명하자면
// 서블릿 초기화 시 호출되는 init(), 클라이언트 요청을 처리하는 service(), 서블릿 종료 시 자원 정리하는 destroy()
// 서블릿 설정 정보를 반환하는 getServletConfig(), 서블릿에 대한 간단한 설명을 반환하는 getServletInfo() 메소드로 이루어져 있다.
// 따라서 Servlet 인터페이스를 직접 구현하려면 위 5개의 메소드 모두 오버라이딩 해야 한다. 
// 그러나 Servlet 인터페이스를 직접 구현하는 경우는 드물고, 실무에서는 일반적으로 HttpServlet 클래스를 상속받는 구조를 사용한다.
// 그렇기 때문에 HTTP 메소드 즉 doGet(), doPost()만 오버라이딩하는 패턴이 일반적이다.

/* doGet()과 doPost()의 차이는 무엇인가요? */

/* ServletContext와 ServletConfig의 차이는 무엇인가요? */

/* Servlet이 클라이언트 요청을 처리하는 방식은 어떤 흐름으로 이루어지나요? */

/* Servlet이 스레드로 요청을 처리하는 방식(멀티스레드 처리 구조) */

/* ============================================================================= */
/* 2. HTTP 및 요청/응답 관련 */

/* HTTP 요청 파라미터를 어떻게 받아오나요? */

/* HTTP 응답에 데이터를 어떻게 전송하나요? */

/* 리다이렉트와 포워드의 차이는 무엇인가요? */

/* 세션(Session)과 쿠키(Cookie)의 차이는 무엇인가요? Servlet에서 어떻게 사용하나요? */

/* HttpServletRequest와 HttpServletResponse는 각각 어떤 역할을 하나요? */

/* ============================================================================= */
/* 3. 실무 감각 확인용 (간단 구현 경험) */

/* Servlet에서 로그인 기능을 구현한다고 할 때, 어떤 흐름으로 처리하겠나요? */

/* POST 방식으로 폼 데이터를 받아와 DB에 저장하는 흐름을 설명해보세요. */

/* Servlet 필터(Filter)는 무엇이며, 언제 사용하나요? */

/* Servlet에서 한글이 깨질 때 어떻게 처리하나요? */

/* ============================================================================= */
/* 4. 확장 개념 or 비교 질문 (심화) */

/* Spring MVC와 Servlet의 차이를 아시나요? */

/* Servlet 기반 MVC 패턴의 흐름을 설명해보세요. */

/* 서블릿 매핑은 어떻게 설정하나요? web.xml vs @WebServlet 차이점은? */

/* 비동기 서블릿(Async Servlet)이 무엇인지 아시나요? */