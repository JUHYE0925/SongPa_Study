/* VIEW란? */
// VIEW는 하나의 SELECT 쿼리를 저장한 객체로, 가상 테이블이라고 부릅니다.
// 물리적으로 데이터를 저장하지 않으며, VIEW를 조회할 때마다 저장된 쿼리가 실행되어 결과를 보여줍니다.
// 일반 테이블처럼 조회할 수 있지만, 실제 데이터를 갖고 있는 것은 아닙니다.


/* VIEW 장단점 */
// VIEW에는 다음과 같은 장점이 있다.
// 장점:
// - 자주 사용하는 복잡한 쿼리를 단순하게 사용할 수 있어 개발 생산성이 향상됩니다.
// - 민감한 컬럼을 제외한 데이터만 보여줄 수 있어 보안에 유리합니다.
// - 논리적인 독립성을 제공하여, 데이터베이스 구조 변경 시에도 사용자 쿼리를 유지할 수 있습니다.
// 단점:
// - VIEW는 자체적으로 데이터를 저장하지 않기 때문에, 성능 이슈가 발생할 수 있습니다.
// - 일반적으로 인덱스를 직접 생성할 수 없고, 원본 테이블의 인덱스를 사용합니다.
// - 일부 VIEW는 삽입, 수정, 삭제 같은 DML 작업이 제한될 수 있습니다.

/* VIEW 사용하는 이유 */
// VIEW를 사용하는 주요 이유는 보안성과 쿼리의 재사용성 때문입니다.
// 민감한 정보를 가진 테이블에서 일부 컬럼만 노출하는 VIEW를 제공하여, 
// 사용자 권한에 따라 데이터를 제한적으로 보여줄 수 있습니다.
// 또한 복잡한 조인이나 조건이 포함된 쿼리를 VIEW로 정의해두면, 개발자가 매번 쿼리를 작성하지 않아도 되어 편리합니다.
// 예를 들면 사용자 테이블에서 관리자 정보는 제외하고 일반 사용자 정보만 보여주는 VIEW를 만들면, 불필요한 정보 노출을 막을 수 있습니다.

/* VIEW와 MATERIALIZED VIEW의 차이점도 준비해두면 좋습니다. */


/* 논리적 독립성 */