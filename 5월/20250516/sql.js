/* DB 개요 */

/* SQL이란? */
// SQL(Structured Query Language)은 관계형 데이터베이스 관리 시스템(RDBMS)에서 
// 데이터를 정의하고 조작하기 위해 설계된 특수 목적의 프로그래밍 언어이다.
// 주요 기능으로는
// 데이터베이스 구조 생성 및 수정하는 데이터 정의어(DDL),
// 데이터 검색, 삽입, 수정, 삭제하는 데이터 조작어(DML),
// 데이터베이스에 대한 권한 부여 및 회수하는 데이터 제어 명령어(DCL),
// 트랜잭션 처리하는 명령어(TCL)로 구분된다.

/* DDL */
// DDL(Data Definition Language) 데이터 정의 언어란
// 데이터베이스의 구조(스키마)를 정의하거나 수정하는 데 사용되는 명령어들의 집합이다.
// 즉, 테이블, 뷰, 인덱스, 제약조건 등의 데이터베이스 객체의 생성, 수정, 삭제를 담당한다.
// DDL에는 테이블 생성하는 CREATE, 테이블 구조를 수정하는 ALTER, 테이블 삭제하는 DROP, 
// 테이블 이름을 변경하는 RENAME, 테이블을 초기화하는 TRUNCATE가 있다.
// DDL은 명령어를 입력하는 순간 작업이 즉시 반영(auto commit)되기 때문에 사용할 때 주의해야한다.
// 즉, 실행과 동시에 변경사항이 즉시 반영되어 RollBack으로 되돌릴 수 없다.
// 그렇기 때문에 실수로 테이블을 삭제하거나 데이터를 초기화하면 복구가 어렵다.

/* DML */
// DML(Data Manipulation Language) 데이터 조작 언어란
// 데이터베이스의 내부에 저장된 데이터를 조회, 추가, 수정, 삭제 하기 위한 명령어들의 집합니다.
// 즉, 데이터 자체를 조작하는 언어이기 때문에 데이터의 구조는 변경되지 않는다.
// DML에는는
// 데이터를 조회하는 SELECT, 새 데이터를 추가하는 INSERT, 기존 데이터를 수정하는 UPDATE, 기존 데이터를 삭제하는 DELETE가 있다.
// DML은 DDL과 달리 적는 즉시 반영 되지(auto commit)는 않는다.
// 다시 말해 DML에 의한 데이터 변동은 영구적인 것이 아니기 때문에 TCL의 RollBack으로 다시 되돌릴 수 있다.
// 그 이유는 DML은 타겟 테이블을 메모리 버퍼 위에 올려두고 변경을 수행하기 때문에,
// Commit 명령어를 통해서만 실제 테이블에 저장되어, 실시간으로 테이블에 반영되지 않는다.

/* DCL */
// DCL(Data Control Language)란 데이터 제어 언어로
// 데이터베이스 내 보안, 권한 관리, 무결성, 회복, 병행 제어 등을 위한 제어 명령어의 집합이다.
// 즉, 누가 데이터에 접근하고 조작할 수 있는지를 제어함으로써 데이터의 보안과 안정성을 확보한다.
// DCL에는 권한을 부여할 때 사용하는 GRANT와, 부여한 권한을 회수하는 REVOKE 명령어가 있다.
// 이러한 명령어를 통해 DCL은 불법적인 사용자로부터 데이터를 보호하기 위해 보안 역할을 수행하며,
// 데이터의 정확성을 위한 무결성을 유지하기도 한다.
// 마지막으로 시스템 장애에 대비한 회복과 다중 사용자 환경에서의 병행 처리도 제어한다.
// 주의할 점은 DCL 명령어는 데이터베이스 시스템에 따라 자동 커밋되기도 하며
// 일부 시스템에서는 트랜잭션에 포함될 수 없다.
// DBMS 특성에 따라 다르게 동작할 수도 있다.

/* DCL의 역할 */
// 보안(Security) : 인가된 사용자만 데이터베이스에 접근 가능하도록 제한
// 무결성(Integrity) : 잘못된 접근이나 조작으로부터 데이터의 정확성 보호
// 회복(Recovery) : 시스템 장애 발생 시 안정적인 데이터 복원 기반 제공
// 병행 제어(Concurrency Control) : 다수의 사용자 동시 접근 시 데이터 충돌 방지

/* TCL */
// TCL(Transaction Control Language)는 트랜잭션 제어 언어로 
// 테이블이 아닌 트랜잭션의 흐름을 제어할 때 사용한다.
// DCL과 비슷한 맥락이지만 데이터 보안이 아닌, DML에 의해 조작된 작업 단위를 관리한다.
// 여기서 트랜잭션이란
// 데이터베이스의 상태를 변화시키기 위한 논리적인 작업 단위를 의미한다.
// 예를 들어, MySQL에서 입력하는 하나의 DML 명령어 또는 일련의 DML 작업들을 하나의 트랜잭션으로 간주할 수 있다.
// TCL에는 다음과 같은 명령어가 있다.
// Commit : 모든 작업을 확정하고, 데이터베이스에 영구 반영
// Rollback : 모든 작업을 취소하고, 트랜잭션 시작 전으로 상태 복원
// Savepoint : 중간 저장 지점을 설정하여, 특정 시점까지 롤백 가능 

/* 트랜잭션의 특징 4가지(ACID) */
// 트랜잭션은 크게 4가지의 특징을 가지고 있다.
// 원자성(Atomicity) : 트랜잭션이 데이터베이스에 모두 반영되던가, 아니면 모두 반영되지 않아야 한다는 것이다.
// 일관성(Consistency) : 트랜잭션 수행 전 후의 데이터 상태가 항상 유효해야 하며, 제약 조건을 위반하지 않아야 한다.
// 독립성(Isolation) : 동시에 실행되는 트랜잭션은 서로의 작업에 간섭하지 않아야 한다.
// 지속성(Durability) : 트랜잭션이 성공적으로 완료되었을 때, 결과는 시스템 오류가 발생해도 영구적으로 유지되어야 한다.

/* 트랜잭션 상태 */
// 트랜잭션의 동작 흐름에 따라 다음과 같이 5가지 상태가 존재한다.
// Activate : 트트랜잭션이 현재 실행 중인 상태
// Failed : 트랜잭션이 실행되다 오류로 인해 중단된 상태
// Aborted : 트랜잭션이 비정상적으로 종료되어 RollBack이 수행된 상태(Rollback으로 트랜잭션이 취소된 상태)
// Partially Committed : 트랜잭션의 연산이 모두 완료되었지만 Commit이 되지 않은 상태
// Commited : 트랜잭션이 모두 성공적으로 종료되고 Commit 연산을 실행하여 데이터에 모두 반영된 상태

/* TCL의 Commit과 Rollback */
// Commit과 Rollback은 모두 데이터베이스의 트랜잭션을 제어하기 위한 명령문이다.
// Commit은
// 트랜잭션에서 수행한 모든 변경 사항을 영구적으로 데이터베이스에 반영한다.
// COMMIT 전에는 다른 사용자가 변경 내용을 볼 수 없으며, 변경된 데이터는 잠겨 있어 다른 사용자의 수정이 불가능하다.
// Rollback은 
// 트랜잭션 중 오류가 발생하거나 사용자가 작업을 취소하고 싶을 때, 트랜잭션 이전 상태로 되돌린다.
// 관련된 잠금은 해제되며, 데이터 변경사항도 복구된다.