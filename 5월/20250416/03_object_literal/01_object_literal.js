/* 객체 - Object */

// 객체틑 프로퍼티 집합이며, 프로퍼티는 키와 값으로 구성된다.
// 프로퍼티는 키-값이 쌍으로 구성되며 객체의 상태를 나타내는 값이다.
var student = {
    name : '아무개',
    age : 20
}; // 이런 형태로 구성되며
// name, age가 키, '아무개', 20이 값을 의미한다.
// 프로퍼티가 여러개일 경우에는 , 를 이용하여 연결한다.
// 프로퍼티를 정의하지 않을 경우에는 빈 객체가 생성된다.
var student = {};
console.log(student); // {}

/* --------------------------------------------------- */

/* 프로퍼티 - Property */

// 01_프로퍼티티
// 프로퍼티 키는 빈문자열을 초함하는 모든 문자열이므로 따옴표를 사용한다.
// 다만 식별자 네이밍 규칙을 따르는 경우에는 생략 가능하다.
// 프로퍼티 값은 자바스크립트에서 사용할 수 있는 모든 값이다.
var obj = {
    normal : 'normal', // 식별자 네이밍 규칙을 따를 경우 따옴표 생략 가능
    '@normal' : '@normal', // 특수 기호 사용 시에는 따옴표 사용
    'n o r m a l' : 'space normal', // 여백을 줄 경우에도 따옴표 사용
    0 : 0  // 숫자는 내부적으로 문자열로 변환
}
// 빈 문자열을 키로 줄 순 있지만 권장하지 않으며 중복된 키가 있을 경우 나중에 선언한 프로퍼티의 값으로 대체된다.

// 02_함수 - method

// 자바스크립트의 함수는 객체이다. 
// 함수는 값으로 취급할 수 있고 프로퍼티 값으로 사용할 수 있다.
var user = {
    id : 'asefse',
    grade : function(mygrade){
        console.log(`${this.id}의 등급은 ${mygrade}이다.`)
    }
};

user.grade('신입');  // asefse의 등급은 신입이다.
// 여기서 mygrade는 매개변수, '신입'은 전달인자이다.

// 03_프로퍼티 접근

// 마침표 표기법 - 위에서 사용한 함수 이용
// .를 이용하여 변수.프로퍼티 키 형태로 작성하여 프로퍼티 값에 접근한다.
console.log(user.id);

// 대괄호 표기법
// []를 사용하며 변수['프로퍼티키'] 형태로 작성하여 프로퍼티 값에 접근한다.
// 키 값에 특수문자가 들어갈 경우에는 대괄호 표기법으로만 접근이 가능하다.
console.log(user['id']);

// 04_프로퍼티 값 변경, 추가, 삭제

var user = {
    id : 'angel'
};

// 프로퍼티 값 변경
user.id = 'devil';

// 프로퍼티 값 동적 추가
user.grade = 'master';

// 프로퍼티 삭제
delete user.id;
// 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시된다.

/* --------------------------------------------------- */

/* ES6 */

// 01_프로퍼티 값 단축 구문
// 변수를 프로퍼티 값으로 사용할 수 있다.
var name = '유관순'

var person = {
    name : name
};

// 변수 이름과 프로퍼티 키가 동일한 이름일 경우 프로퍼티 키를 생략할 수 있다.
// 이 때 프로퍼티 키는 변수 이름으로 자동 생성된다.
var person2 = { name };

// 02_메소드 단축

// ES6에서는 메소드를 정의할 때 function 키워드를 생략한 축약 표현을 사용할 수 있다.
var person = {
    grade(mygrade){
        console.log(`나의 등급은 ${mygrade}이다.`);
    }
};

person.grade('master')

/* --------------------------------------------------- */

/* 추가 연산자와 순회 */

// 01_in 연산자
// in 연산자는 프로퍼티의 존재 여부를 확인하기 위해 사용한다.

var user = {
    name : '아무개',
    test : undefined
};

console.log(user.test === undefined); // true
console.log("test" in user); // true
// 프로퍼티 값이 undefined라 프로퍼티가 존재하더라도 === 을 쓸 경우에는 undefined로 처리된다.
// 이를 해결하기 위해 in 연산자를 사용하여 해당 프로퍼티가 존재함을 확인 가능.

// 02_for-in 반복문
// 객체의 모든 키 순회하여 발견한 모든 것들을 key라는 변수에 담는다.

var user = {
    name : '아무개',
    test : undefined
};

for(var key in user){
    console.log(`key : ${key}`);  // 키
    console.log(`student[key] : ${student[key]}`);  // 키에 해당하는 값
}