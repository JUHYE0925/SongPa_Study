/* 함수 */

/* 함수 정의 */

// 자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수의 이름과 동일한 명으로 식별자를 암묵적으로 생성하여
// 함수 객체를 할당한다. 즉, 함수는 함수 이름으로 호출하는 것이 아닌 식별자로 호출된다.

// 01_함수 선언문
// 함수 선언문은 function 함수명(매개변수){실행될 코드} 로 구성된다.
// 함수 선언문에서는 함수의 이름을 생략하면 식별자가 사라지기 때문에 생략할 수 없다.

function hello(){
    console.log('안녕하세요.');
}

// 02_함수 표현식
// 함수 표현식은 var(let, const) 변수 = function 함수명(매개변수){}; 로 구성된다.
// 함수 표현식에서는 변수가 식별자이기 때문에 함수명을 생략 가능하다. 단 함수 호출은 식별자로 한다.
var hello = function(){
    console.log('안녕하세요.');
}

// 03_함수 호이스팅

// 함수 선언문은 런타임 이전 자바스트립트 엔진에 의해서 먼저 실행된다.
// 따라서 함수 선언문 이전에 함수를 참조할 수 있으며 호출할 수도 있다.
// 이 때 함수 선언문이 코드의 선두로 끌어올려진 것 처럼 동작하며 이를 함수 호이스팅이라고 한다.
// 반면 함수 표현식의 경우 변수 할당문의 값은 할당문이 실행되는 시점인 런타임에 평가되므로 함수 호이스팅이 불가하다.
// 함수 표현식으로 정의된 함수는 반드시 함수 표현식 이후에 참조 또는 호출해야한다.


/* --------------------------------------------------- */

/* 함수 호출 */

// 01_매개변수와 인자(전달인자 혹은 인수)

function hello(name){
    
    // 매개변수는 함수 내부에서만 참조할 수 있다.
    console.log(name);

    return `${name}아 안녕~`;
}
// console.log(name) // 함수 외부에서는 참조할 수 없다.

// 함수 호출
var result = hello('아무개');

// 매개변수보다 전달인자의 수가 부족해서 할당되지 않은 매개변수 값은 undefined이다.
result = hello();

// 매개변수보다 전달인자의 수가 더 많은 경우에는 초과된 전달인자는 무시된다.
result = hello('아무개', '똥개');

// 매개변수 기본값이 설정된 경우에는 전달인자가 없어도 기본값으로 출력된다.
function hi(name = '아무개'){
    console.log(`${name}, 안녕`);
}
result = hi();

// 02_반환문
// 반환문 이후에 오는 코딩식은 실행되지 않고 무시된다.

function hello(name){
    return `${name}아 안녕~`;
    console.log(name);
}

// 반환값을 명시적으로 지정하지 않으면 undefined가 반환된다. 또한 이 때 return은 생략 가능하다.
function func(){};

/* --------------------------------------------------- */

/* 화살표 함수 */

// 기존 함수 정의
var message;
message = function(){
    return 'Hello World';
}

// function 키워드 생략 가능
message = () => {
    return 'Hello World';
}

// 실행문이 하나만 있을 경우 중괄호, return 생략 가능
message = () => 'Hello World';

// 매개변수 있으며 하나일 경우에는 매개변수를 감싸는 소괄호도 생략 가능하다.
message = param => 'Hello World';

// 매개변수가 여러 개 일 경우에는 소괄호 생략은 불가하다.
message = (param1, param2) => 'Hello World';

/* --------------------------------------------------- */

/* 다양한 타입의 함수들 */

// 01. 즉시 실행 함수
// 즉시 실행 함수는 선언과 동시에 바로 실행하는 함수로 소괄호로 감싼다.
// 함수 이름이 없는 익명 함수를 사용하는 것이 일반적이다.
// 함수 이름을 작성할 수 있지만 해당 이름으로 다시 호출할 수 없다.
// 즉 즉시 실행 함수는 선언과 동시에 바로 실행되며 딱 한 번만 호출된다.
(function(){
    console.log('Hello World');
})();

// 02_재귀 함수
// 함수가 자기 자신을 호출하는 것을 재귀 호출이라고 하며 이를 수행하는 함수를 재귀함수라고 한다.
// 반복되는 처리를 위해 사용하며 반복문 없이 사용할 수 있지만 무한 루프에 빠질 수 있고 이로 인해 스택 오버플로 에러를 발생시킬 수 있다.

function factorial(n){
    if(n <= 1){
        return 1;
    }
    // 재귀호출
    return n * factorial(n-1);
}

// 03_중첩 함수
// 중첩 함수는 함수들이 중첩된 것을 의미하며 외부 함수와 내부 함수로 나눌 수 있다.
// 내부 함수의 변수는 내부 함수에서만 참조 가능하며 외부함수의 변수는 외부, 내부 함수 모두 참조 가능하다.
function outer(){
    var outerVal = '외부 함수';

    function inner(){
        var innerVal = '내부 함수';
        console.log(outerVal, innerVal);
    }
    inner();
}
outer();

// 04_콜백함수
// 함수의 매개변수를 통해 다른 함수의 내부로 전달되는 함수를 의미한다.
// 매개변수를 통해 함수의 외부에서 콜백 함수를 전달받는 함수를 고차함수라고 한다.

// 콜백함수수
function increase(num){
    return num + 1
}

// 고차 함수  -> 매개변수로 함수랑 매개변수를 같이 받는다.
function sum(func, num){
    return(func(num));
}

console.log(sum(increase, 5));

// 고차 함수를 쓰면서 새롭게 콜백 함수를 만들어서 사용할 수도 있다.
console.log(sum(function(num){return num ** 2}, 5));  // -> 제곱하는 식