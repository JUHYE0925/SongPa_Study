/* 의존성 주입하는 방법 3가지를 설명하시오. */
// 의존성 주입 방법은 크게 3가지로 필드 주입, 생성자 주입, setter 주입이 있다.
// 필드 주입은
// 객체의 필드에 @Autowired 어노테이션을 붙여 주입하는 방식이다.
// 코드가 간결하다는 장점이 있지만, 테스트 코드 작성이나 의존성 변경이 어려워 권장하지 않는 방식이다.
// 생성자 주입은
// 생성자 파라미터를 통해 의존 객체를 주입하는 방식이다.
// 스프링 4.3부터 생성자가 하나 뿐이라면 @Autowired를 생략해도 가능하다.
// 생성자 주입은 final 키워드를 통해 불변성을 보장하고, 테스트 및 객체 생성 시 의존성 확인이 가능하기 때문에
// 가장 권장되는 방식이다.
// setter 주입은
// @Autowired 어노테이션을 붙인 setter 메소드를 통해 의존성을 주입 받는 방식이다.
// 선택적 의존성 주입에 유리하지만, 객체가 완전히 생성된 후 주입되므로 불변성이 깨질 수 있다.

/* 의존성 주입 방법 중 생성자 주입 방식을 선호하는 이유에 대해 설명하시오. */
// 생성자 주입 방식을 선호하는 이유는 다음과 같은 장점들 때문이다.
// 첫째, 객체가 생성될 때 모든 의존성을 반드시 주입받기 때문에 의존성이 누락될 가능성이 없다.
// 그리고 주입받는 필드에 final 키워드를 사용할 수 있어, 객체 생성 이후에는 의존성을 변경할 수 없게 되어
// 불변성을 보장할 수 있다.
// 둘째, 순환 참조 문제를 어플리케이션 실행 시점에 바로 발견할 수 있다는 장점이 있다.
// 필드 주입이나 setter 주입은 런타임 중에 문제가 발생하는 반면, 생성자 주입은 어플리케이션 시작 시점에 오류가 발생하므로 문제를 조기에 확인할 수 있다.
// 셋째, 생성자를 통해 어떤 의존 객체가 필요한지 명확하게 드러나기 때문에 코드의 가독성이 좋아지고,
// 테스트 코드 작성 시에도 생성자를 통해 의존성을 쉽게 주입할 수 있어 테스트가 훨씬 수월해진다.
// 이러한 이유들로 인해 실무에서는 생성자 주입 방식이 가장 많이 사용된다.

/* 의존성 주입과 스프링 IoC 컨테이너의 관계는 무엇인가? */
// 스프링에서 의존성 주입은 IoC(제어의 역전)을 구현하는 대표적인 방식이다.
// 스프링 IoC 컨테이너는 어플리케이션에서 사용하는 객체들을 직접 생성하고, 필요한 의존성을 주입하는 역할을 한다.
// 기존에는 개발자가 new 키워드를 사용하여 직접 객체를 생성하고 연결했다면,
// 스프링에서는 객체 생성과 의존성 주입을 IoC 컨테이너에게 위임함으로써 제어의 프름이 개발자에서 프레임워크로 연전된다.
// 이것이 바로 제어의 역전(Inversion of Control)이다.
// 그리고 이 때 객체 간의 의존성을 컨티이너가 대신 연결해주는 방식을 의존성 주입(DI, Dependency Injection)이라고 한다.
// 즉, DI는 IoC 원칙을 구현하는 방법 중 하나이며, 스프링은 이 방식을 통해 낮은 결합도와 유연한 구조를 갖는 어플리케이션을 만들 수 있도록 지원한다.

/* Bean의 스코프에 대해서 설명하시오 */
// 스프링에서 Bean 스코프는 스프링 컨테이너가 객체를 얼마나, 그리고 언제까지 관리할지를 결정하는 범위를 말한다.
// 즉, 빈이 생성되고 유지되는 생명주기를 설정하는 건데, 스프링에서는 대표적으로 5가지 스코프를 제공한다.
// 가장 기본이 되는 것은 singleton 스코프이다.
// singleton 스코프는 컨테이너 당 하나의 인스턴스만 생성하고, 모든 곳에서 이 인스턴스를 공유해서 사용하게 된다.
// 스프링 Bean의 기본 스코프이기도 해서 가장 자주 쓰인다.
// 두 번째는 prototype인데 이건 Bean을 요청할 때 마다 새로운 인스턴스를 생성하는 방식이다.
// 상태를 가지는 객체나, 매번 새로운 객체가 필요한 경우에 사용하게 된다.
// 그리고 웹 환경에서만 사용하는 스코프들도 있다.
// request 스코프는 HTTP 요청마다 새로운 Bean을 생성하고 요청이 끝나면 소멸된다.
// session은 사용자 세션마다 하나의 빈을 유지해서, 세션이 끝날 때 까지 같은 인스턴스를 사용한다.
// 그 외에도 application이나 globalsessio같은 스코프도 있지만, 일반적인 Spring MVC환경에선 거의 쓰지 않고,
// 포털 같은 특수한 환경에서 사용되는 경우가 많다.
// 그래서 실제로는 singleton이 기본값이며, 필요에 따라서 prototype, request, session 정도를 선택적으로 사용하는 경우가 많다. 