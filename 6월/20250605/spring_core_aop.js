/* AOP란?*/
// AOP(Aspect Oriented Programming)는 관점 지향 프로그래밍이란 뜻으로, 핵심 비즈니스 로직과는 별도로 존재하는 공통 관심사(로깅, 트랜잭션, 보안 등)를 분리하여 관리함으로써, 
// 코드의 중복을 줄이고 모듈성을 향상시키는 프로그래밍 패러다임이다. 
// 즉, AOP는 메소드의 실행 전/후, 예외 발생 시점 등 특정 시점에 공통 기능을 끼워 넣는 방식으로 동작한다. 
// 기존의 자바에서 배웠던 OOP(객체 지향 프로그래밍)에서 모듈화의 핵심 단위가 "Class"라고 했다면, AOP에서는 "관점"이 핵심 단위가 된다.

/* AOP 핵심 용어 정리 */
// AOP는 공통적으로 반복되는 기능들을 비즈니스 로직과 분리하여 관리할 수 있게 해주는 개념이다.
// AOP를 구성하는 주요 개념은 다음과 같다.
// Aspect는
// 공통 기능을 담은 모듈 단위로 핵심 비즈니스 로직과는 별도로 수행하는 횡단 관심사를 의미한다.
// Advice는
// Aspcet 안에서 실제로, 언제, 어떤 작업을 실행할지를 정의한 메소드이다. 메소드 전과 후, 예외 발생 시점 등 다양한 시점에 동작할 수 있다.
// Join Point는
// Advice가 적용될 수 있는 실행 지점들을 의미하며 Spring AOP에서는 조인 포인트를 메소드 실행 시점으로 제한한다.
// Pointcut은
// 조인 포인트 중에서도 어떤 대상에 Advice를 적용할지를 지정하는 필터 역할을 한다. 즉 실제 Advice가 적용되는 대상이다.
// Weaving은
// Advice를 실제 비즈니스 코드에 적용하는 과정을 의미한다.
// Spring AOP에서는 주로 런타임 시점에 프록시 객체를 생성해서 위빙이 이루어진다.
// 이렇게 AOP를 활용하면 중복되는 코드를 줄이고, 핵심 비즈니스 로기에만 집중할 수 있어
// 유지보수성과 확장성이 좋아지는 장점이 있다.

/* AOP의 Advice 종류에 대해 설명하시오 */
// AOP에서 Advice는 공통 로직을 실제로 언제 실행할지를 정의하는 부분이다.
// Advice는 총 다섯 가지 종류가 있고, 메소드 실행의 시점에 따라 구분된다.
// @Before는 대상 메소드가 실행되기 직전에 실행되는 Advice이다. 주로 로깅, 인증 검사 등에 사용된다.
// @After는 대상 메소드가 실행된 후, 정상 종류 또는 예외 여부와 상관없이 항상 실행된다.
// 리소스 해제 등 공통 후처리에 적합하다.
// @AfterReturngin은 대상 메소드가 정상적으로 실행하여 결과를 반환한 뒤에 실행되며 메소드의 반환값을 가로채서 처리할 수 있다.
// @AfterThrowing은 대상 메소드에서 예외가 발생했을 때만 실행되는 Advice로 예외 로깅이나 알림 처리에 주로 사용된다.
// @Around는 대상 메소드의 실행 전과 후를 모두 감싸는 Advice이다. proceed() 메소드를 호출함으로써 실제 메소드 실행 여부를 제어할 수 있어 가장 유연하다.
// 실행 시간 측정, 트랜잭션 처리 등에 많이 사용된다.
// 정리하자면, Advice는 공통 기능이 언제 실행되는지를 지정하는 핵심 요소이고, 
// 특히 @Around는 메소드의 실행 자체를 통제할 수 있기 때문에 가장 강력한 타입이라고 볼 수 있다.

/* AOP는 어떤 문제를 해결하기 위해 등장하였나? */

/* @Around 어드바이스가 특별한 이유를 설명하시오. */
// @Around 어드바이스는 AOP에서 가장 강력한 어드바이스 유형이다.
// 그 이유는 메소드 실행 전과 후 모두를 제어할 수 있고, 심지어 대상 메소드의 실행 자체를 생략하거나
// 결과를 변경할 수도 있기 때문이다.
// 다른 어드바이스들은 실행 시점이 제한되어 있지만, @Around는 하나의 어드바이스로 전 과정에 개입할 수 있다.
// 예를 들어, ProceedingJoinPoint를 사용해서 실제 대상 메소드 실행 시점을 내가 직접 정하거나,
// 실행 여부를 조건적으로 결정할 수도 있다.
// 이를 통해 트랜잭션 처리, 로깅, 성능 측정, 보안 검사 등 다양한 목적으로 유연하게 활용할 수 있다.
// 따라서 @Around 어드바이스는 기능적으로 가장 유연하고, 범용적으로 사용 가능하기 때문에 특별하다고 생각한다.

/* Spring AOP는 어떤 방식으로 동작하나요? (프록시 방식) */

/* AOP를 실무에서 어떻게 활용할 수 있을까요? */

/* AOP를 남용하면 안되는 이유는 무엇인가? */

/* Pointcut 표현식에서 execution은 어떻게 사용하나요? */
// execution은 AOP에서 Pointcut을 정의할 때 가장 일반적으로 사용되는 표현식이다.
// 이 표현식은 메소드이 실행 지점을 기준으로 어떤 메소드에 Advice를 적용할지를 지정할 수 있다.
// 기본 형식은 다음과 같다.
// execution([수식어] 리턴타입 [패키지명.]클래스명.메서드명(파라미터))
// 이 때 수식어는 생략 가능하며
// *와 .. 같은 와일트 카드 표현을 활용하여 다양한 메소드를 포괄할 수 있다.
// *(..)는 매개변수가 0개 이상인 모든 메소드를 호출하며
// *(*)는 매개변수가 1개 이상인 모든 메소드를 호출하며
// *(*, ..)는 매개변수가 2개 이상인 모든 메소드를 호출한다.
// 주로 *는 모든 값, ..은 0개 이상의 인자를 의미해서 유연하게 메소드를 선택할 수 있다.
// 실무에서는 패키지 단위 또는 클래스 단위로 묶어서 여러 메소드에 공통 로직을 적용할 때 많이 사용된다.
// 특히 유지보수를 쉽게 하기 위해 표현식을 @Pointcut으로 분리해서 재사용하는 것이 일반적인 패턴이다.