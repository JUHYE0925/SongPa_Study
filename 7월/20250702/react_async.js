/* async */
// 비동기(async)-논블로킹(nonblocking) 작업을 통해 메인 흐름은 멈추지 않은 상태에서
// 특정 작업들을 백그라운드에서 처리하여 동시에 처리하는 것처럼 실행할 수 있다.
// 비동기 작업을 할 때 가장 많이 사용하는 방식이 콜백 함수를 이용하는 방식이다.
// 비동기 처리를 위해 콜백 함수를 이용하다 보면 특정 비동기 처리 이후 수행 내용을 
// 다시 정의해야하는 경우 콜백 함수의 중첩이 생기고 이러한 것이 많이 추가되면 콜백 지옥이 펼쳐진다.
// 이를 보완하기 위해 promise를 사용한다.

/* 콜백함수란? */
// 콜백(Callback) 함수는 간단히 말하면 매개변수로 함수 객체를 전달하여 호출 함수 내에서
// 매개변수 함수를 실행하는 것을 말한다. 
// 즉, 콜백 함수란 파라미터로 일반적인 변수나 값을 전달하는 것이 아닌 함수 자체를 전달하는 것이다.
// 또한 매개변수에 함수를 전달하여 일회용으로 사용되기 때문에 함수의 이름을 명시할 필요가 없어 익명 함수 형태로 넣어준다.

/* Promise */
// promise는 콜백 지옥과 같은 코드가 형성되지 않게(비동기 통신 간에 순서를 정하기 쉽게) 하는
// 방안으로 ES6에서 도입되었다.
// 비동기 연산이 종료된 이후의 결과 값과 실패 사유를 처리하기 위한 처리기를 연결할 수 있으며
// 최종 결과를 반환하는 것이 아닌 미래의 어떤 시점의 결과를 제공하겠다는 '약속'을 반환한다.
// promise의 상태로는 다음과 같이 있다.
// - 대기(pending) : 이행하지도, 거부하지도 않은 초기 상태
// - 이행(fulfilled) : 연산이 성공적으로 완료된 상태
// - 거부(rejected) : 연산이 실패한 상태
// promise 객체는 resolve와 reject 함수를 활용한다.
// 1. resolve : 함수의 인자로 넘어온 값을 저장하고 있다가 then을 만나면 저장했던 값을 지닌 Promise 객체를 반환한다.
// 2. reject : 어떠한 이유로 거부되어야 할 조건일 때의 Promise 객체를 반환한다.

/* Async-await */
// promise 객체를 더 쉽게 사용할 수 있도록 asynce/await가 ES8에서 추가되었다.
// await 키워드를 사용하여 promise를 반환하는 함수를 호출하면 해당 promise의 resolve에 저장된 값이 반환되게 된다.
// then을 사용하지 않고 (메소드 체이닝 방식 없이) 비동기 처리 함수를 동기식으로 처리할 수 있다.