/* 오버로딩이란? */
// 오버로딩이란 매개변수 부분의 타입, 갯수, 순서를 다르게 작성하면 서로 다른 메소드나 생성자로 인식하기 때문에
// 동일한 이름의 메소드나 생성자를 동일 클래스 내에서 여러개 작성할 수 있는 것을 말한다.
// 그렇기 때문에 메소드의 시그니처 부분 중 메소드 이름은 동일하되 파라미터 선언부를 다르게 작성해야만 오버로딩이 성립된다. 

/* 싱글톤 패턴이란? */
// 싱글톤 패턴은 객체를 오직 하나만 생성하여 전역적으로 공유해서 사용하는 디자인 패턴이다.
// 주로 설정 정보나 공통된 로직을 처리하는 객체에 사용된다.
// 즉, 어플리케이션이 시작될 때 어떤 클래스가 최초 한 번만 메모리에 할당하고 
// 그 메모리에 인스턴스를 만들어서 하나의 인스턴스를 공유하여 사용한다.
// 그렇기 때문에 해당 인스턴스를 호출할 때 마다 매번 인스턴스를 생성하지 않기에 메모리를 낭비하는 것을 방지할 수 있게 해주며 속도가 빠르디.
// 또한 인스턴스가 절대적으로 하나만 존재한다는 것을 보장하며 전역 상태를 일관되게 유지할 수 있다는 장점이 있다.
// 하지만 단점 또한 존재하는데 싱글톤 인스턴스가 너무 많은 일을 하거나 많은 데이터를 공유하면
// 결합도가 높아지며 추적이 힘들고 유지보수 또한 힘들다.
// 뿐만 아니라 멀티스테르 환경에서는 동시성 문제를 고려해서 설계해야하기 때문에 난이도가 높다.
// 그 외에도 어플리케이션 내 어디서든 접근이 가능하기에 무분별한 사용을 막기 힘들고 이로 인해 변경에 대한 복잡성이 증가하며,
// 같은 이유로 전역에서 사용되어 변경될 수 있기에 예상치 못한 동작이 발생할 수 있다.

/* 싱글톤패턴 VS 정적클래스(static클래스) */
// 싱글톤 패턴과 정적클래스 둘 다 전역에서 접근이 가능하며
// 싱글톤은 getInstance()와 같은 메소드를 통해, 정적 클래스는 클래스명을 통해 직접 접근이 가능하다.
// 또한 둘 다 하나의 객체만 가지고 있는데 싱글톤은 인위적으로 하나의 인스턴스만 생성되도록 제한하고
// 정적 클래스는 아예 인스턴스를 생성할 수 없다.(private 생성자 또는 인스턴스와 금지)
// 그렇기에 공통 로직, 설정, 상태 저장 등 공유가 필요한 자원을 처리하는데 사용된다.
// 
// 하지만 엄연한 차이가 존재하는데
//
// <싱글톤패턴>
// - 클래스의 인스턴스를 하나만 생성하여 전역적으로 공유합니다.
// - 인스턴스 생성 시점을 개발자가 제어할 수 있어, 필요한 시점에 인스턴스를 생성하여 리소스를 효율적으로 사용 가능
// - 상속이나 인터페이스 구현이 가능하여 확장성을 가진다.
// - 일반 클래스처럼 생성자와 인스턴스 변수를 사용할 수 있으며, 인스턴스를 통해 메소드 호출 또한 가능하다.
// 
// <정적클래스(static클래스)>
// - 모든 필드와 메소드에 static 키워드를 사용하며, 인스턴스를 생성하지 않고 클래스명(클래스명.메소드명명)으로 직접 접근한다.
// - 프로그램 실행 시작 시점에 자동으로 메모리에 로드되며(인스턴스가 생성되어 초기화) 종료 시 까지 메모리에 상주한다.
// - 상속과 인터페이스 구현이 불가능하며, 유연성과 확장성 측면에서는 제약이 있다.
// - 정적 생성자는 가질 수 있으나, 매개변수는 갖지 못하며, 접근제한자도 사용할 수 없다.
//
// 결론적으로 확장성과 객체지향적인 설계기 필요한 경우 싱글톤 패턴이 적합하고,
// 단순한 유틸성 메소드 집합처럼 상태를 가지지 않는 기능만 필요한 경우에는 정적 클래스를 사용하는 것이 적절하다.

/* 이른 초기화와 게으른 초기화 설명하시오 */
// <이른 초기화>
// 
//
// https://velog.io/@y_dragonrise/%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4Singleton-Pattern

/* final 키워드 */

/* 변수 저장 메모리, 생성 시기 정리하기 */

/* 초기화 블록 */

/* 오버로딩과 오버라이딩의 차이를 설명하시오 - 오버라이딩 배우면 넣기 */