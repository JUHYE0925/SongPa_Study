/* 열거타입(emun)이란? */
// 열거타입(enum)은 관련 있는 상수들의 집합을 하나의 타입으로 정의할 수 있도록 해주는 자바의 기능이다.
// 자바 1.5 이전에는 final 키워드를 이용하여 "static final int"(정수 상수)로 상수값들을 관리하는 패턴을 사용하였다.
// 하지만 이 방식에는 몇 가지 단점이 있다.
// 정수로 표현되기 때문에 해당 값의 의미를 파악하기 어렵고,
// 잘못된 값이 할당되어도 컴파일 에러가 발생하지 않아 타입 안전성을 보장받기 어려우며,
// 반복문이나 조건문에서 활용하기 어렵다는 문제가 있다.
// 이러한 문제를 해결하기 위해 등장한 것이 enum이다.
// enum은 상수들을 단순히 정수로 관리하는 것이 아닌 하나의 객체(싱글톤)으로 관리한다.
// 즉, enum에 정의된 각각의 값은 내부적으로 독립된 인스턴스로 관리되며, 타입 안전성을 보장한다.
// 또한 문자열 출력이 가능하고, 반복문과 조건문에서도 활용이 가능하여 
// 가독성과 유지보수성이 높다는 장점이 있다.
// 그 외에도 열거타입은 메소드나 필드를 추가할 수 있고 toString()을 재정의할 수 있지만
// 근본적으로 불변이라는 특징을 가지고 있어 모든 필드는 final이어야 한다.
// 정리하면 enum은 의미 있는 상수 집합을 객체로 안전하게 관리할 수 있게 한다는 점에서 실무에서 많이 사용한다.

/* 람다식 */
// 람다식은 자바 8에서 도입된 문법으로, 메소드를 하나의 식(expression)으로 표현한 것이다.
// 메소드 이름이나 반환 타입 없이 간결하게 작성되기 때문에, 흔히 익명함수라고도 부른다.
// 예) (x, y) -> x + y;
// 람다식에는 다음과 같은 장점들이 있다.
// 불필요한 코드나 반복되는 패턴을 줄여주어 가독성이 좋아지며 코드를 간결하게 표현할 수 있다.
// 컬렉션 및 스트림 API와의 결합이 매우 강력하다.
// 기존에는 반복문이나 익명 내부 클래스를 사용하여 데이터를 처리했다면,
// 람다식을 사용하면 데이터를 필터링하거나 정렬하는 작업들을 훨씬 더 함수형 스타일로 간걸하게 작성할 수 있다.
// 또한 람다식은 기본적으로 함수형 인터페이스를 기반으로 동작한다.
// 즉, 추상 메소드가 하나만 선언된 인터페이스만 람다식의 대상이 될 수 있고,
// 이런 인터페이스를 함수형 인터페이스라고 부른다.
// 이 조건을 컴파일 시점에 체크해주는 것이 @FunctionalInterface 어노테이션이다.
// 정리하자면, 람다식은 코드를 간결하게 만들고, 
// 스트림이나 컬렉션과 함께 데이터를 효과적으로 처리할 수 있도록 해주는 자바 8의 핵심 기능이다.
// 이러한 이유로 실무에서도 가독성과 생산성을 높이기 위해 적극적으로 사용되고 있다.

/* 함수적 인터페이스 */
// 자바에서는 메소드를 클래스나 인터페이스 내부에서만 정의할 수 있기 때문에,
// 람다식도 단독으로 사용되기 보다는 인터페이스를 기반으로 활용된다.
// 특히 람다식은 하나의 추상 메소드만 가진 인터페이스만 사용할 수 있는데,
// 이러ㅗ한 인터페이스를 함수형 인터페이스라고 한다.
// 이러한 조건을 컴파일 시점에 명확히 체크하기 위해 자바는 @FunctionalInterface 어노테이션을 제공한다.
// 이 어노테이션은 해당 인터페이스가 정확히 하나의 추상 메소드만 가지고 있는지를 검증하는 역할을 하며
// 자바에서는 대표적으로 함수형 인터페이스들을 java.util.function 패키지를 통해 미리 제공한다.
// 함수형 인터페이스는 크게 Consumer, Supplier, Function, Operator, Predicate로 구분된다.
// Consumer 함수적 인터페이스는 매개변수는 있지만 리턴 값이 없는 accept() 메소드를 가지고 있다.
// accept() 메소드는 단지 매개변수로 넘어온 값을 리턴하지 않고 소비하는 역할만 한다는 특징을 가진다.
// Supplier 함수적 인터페이스는 매개변수는 없고 리턴값이 있는 get() 메소드를 가진다.
// Function 함수적 인터페이스는 매개변수와 리턴값 모두 가지며 apply() 메소드를 가지는데 
// 이 메소드들은 매개변수를 리턴값으로 매핑하는 역할을 한다.
// Operator 함수적 인터페이스는 Function과 같이 작동하는데 다른 점은 
// 매개변수를 이용하여 연산을 한 후 동일한 타입으로 리턴해주는 역할을 한다.
// Predicate 함수적 인터페이스는 매개변수와 boolean 리턴 값이 있는 test()를 가지며
// 이 메소드들은 매개변수 값을 이용하여 참인지 거짓인지 검증한 후 boolean 값을 리턴하는 역할을 한다.
// 정리하자면, 함수형 인터페이스는 람다식의 타깃이 되는 인터페이스로,
// 단 하나의 추상 메소드를 가지며, 자바에서는 람다식을 사용하기 위한 기반이 된다.
// 실무에서는 스트림 API, 콜백 처리, 이벤트 핸들링 등에서 자주 활용된다.